UMIP Access

The umip access user space software consistes of two sections. On is a
library (umip_access.c) and the other is a command line utility
(umip_access_app.c).

The library has a header file (umip_access.h) that needs to be included in the
source code for any function that utilizes the umip_access library.

NOTE: The command line utility as well as the library all output their
standard output (errors, etc) to the official Android logging facility.
This facility *does not* output to the terminal from which you invoke
the command for the command line utility.

Please use the logcat command, invoked from another shell session, to
read the console output from the command line tool and the library.

The command line utility's name is:

umip_access_app.out (if you are in kboot environment)
CC6_UMIP_ACCESS_APP (if you are in Android environment)

The parameters are:

read/write/lock (what you want to do)
If the first parameter is lock, then there are no other parameters
If the first parameter is read or write, then please note these parameters:
Index value (this is the index to the data you want)
File name (full path to the file that is used to read/write the data)

Following two are for write only
Data size (size, in bytes for the data)
Max Data Size (This is only for data write, maximum data size possible for this field)

File read and write are done in binary mode and not text mode.



Widevine Keybox Provisioning
----------------------------
Provisioning the device with a Widevine keybox is done with the "prov" option.
The arguments are:

  <program> prov <provisioning schema> <input file> <output file>

  For example:

    CC6_UMIP_ACCESS_APP prov 0 keybox.bin outfile.bin

Data returned by the provisioning process will be written to the output file. If
there is no return data then an output file of a size of zero bytes will be
created.

The <provisioning schema> argument is a non-negative integer for the type of
provisioning process to use.

Please note that the file is read/written as binary, not text.



Reserved Android Customer Data Indices
--------------------------------------
The first five ACD indices (1-5, inclusive) are reserved for secure data and
should not be used for regular data. If data is written to any of these reserved
indices then the data cannot be read.

Only use ACD indices 6-63, inclusive, for regular data.





Using The Android Customer Data Library
---------------------------------------
If you write an application that needs to use the library (umip_access), you
need to do the following in your makefiles:

Android:

==============================================================
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

DX_CRYS_DIR=$(LOCAL_PATH)/../SepMW
DX_APP_DIR:= $(LOCAL_PATH)

LOCAL_SRC_FILES+= \
<your source file names>

LOCAL_STATIC_LIBRARIES := CC6_UMIP_ACCESS CC6_ALL_BASIC_LIB libcutils libc libcrypto

LOCAL_C_INCLUDES := \
$(DX_APP_DIR)/inc \
$(DX_CRYS_DIR)/VOS6/External/Linux/inc/ \
$(DX_CRYS_DIR)/VOS6/External/VOS_API/ \
$(DX_CRYS_DIR)/DX_CRYS_API/CC6_CRYS_API/inc \
$(DX_CRYS_DIR)/../TST/MW_TST/UTIL/tinc/ \
$(DX_CRYS_DIR)/SepIF/inc \
$(DX_CRYS_DIR)/HostIF/inc/ \
$(DX_CRYS_DIR)/GEN/inc/ \
$(DX_CRYS_DIR)/EXT_APP/inc/

LOCAL_MODULE := <the name of your executable>

LOCAL_MODULE_TAGS := eng

include $(BUILD_EXECUTABLE)
=============================================================


Non Android

Please note that this assumes that your application sources
reside in the chaabi/App subdirectory.

The following is the non Android Makefile. You will need to addd
an addition to this makefile that would be similar to that for the
UMIP_ACCESS_APP_TARGET and UMIP_ACCESS_APP_OBJS.

================================================================
CC =  ../../../../../prebuilt/linux-x86/toolchain/i686-linux-glibc2.7-4.4.3/bin/i686-linux-gcc
CFLAGS = -O -DLITTLE__ENDIAN -DCRYS_NO_OTF_MC_SUPPORT -DLINUX_LOGS
LIBS = .
RM = rm -f

ifdef WITH_EXTFW_TESTS
  CFLAGS += -DWITH_EXTFW_TESTS
endif


SCU_CHAABI_TARGET = secureIPC_ATP.out
SCU_CHAABI_OBJS = secureIPC_ATP.o

SI_VERIFY_TARGET = signed_image_verify.out
SI_VERIFY_OBJS = signed_image_verify.o

UMIP_ACCESS_OBJS = umip_access.o
UMIP_ACCESS_APP_OBJS = umip_access_app.o
UMIP_ACCESS_APP_TARGET = umip_access_app.out

TARGET = $(SCU_CHAABI_TARGET)
OBJS = $(SCU_CHAABI_OBJS)
HOST_PATH = ../SepMW/


INCLUDES := \
	-Iinc/ \
	-I$(HOST_PATH)VOS6/External/Linux/inc/ \
	-I$(HOST_PATH)VOS6/External/VOS_API/ \
	-I$(HOST_PATH)DX_CRYS_API/CC6_CRYS_API/inc \
	-I$(HOST_PATH)../TST/MW_TST/UTIL/tinc/ \
	-I$(HOST_PATH)SepIF/inc \
	-I$(HOST_PATH)HostIF/inc/ \
	-I$(HOST_PATH)INIT/inc/ \
	-I$(HOST_PATH)GEN/inc/ \
	-I$(HOST_PATH)EXT_APP/inc/


all: $(TARGET) $(SI_VERIFY_TARGET) $(UMIP_ACCESS_APP_TARGET) $(UMIP_ACCESS_FILE)

$(TARGET): $(OBJS)
	$(CC) -o $@ $(OBJS) -L$(LIBS) CC6_ALL_LIB.a

$(SI_VERIFY_TARGET): $(SI_VERIFY_OBJS)
	$(CC) -o $@ $(SI_VERIFY_OBJS) -L$(LIBS) CC6_ALL_LIB.a

$(UMIP_ACCESS_APP_TARGET): $(UMIP_ACCESS_OBJS) $(UMIP_ACCESS_APP_OBJS)
	$(CC) -o $@ $(UMIP_ACCESS_APP_OBJS) $(UMIP_ACCESS_OBJS) -L$(LIBS) CC6_ALL_LIB.a

.c.o:
	$(CC) $(CFLAGS) $(INCLUDES) -c $<

clean:
	-$(RM) $(TARGET) $(OBJS) $(SI_VERIFY_TARGET) $(SI_VERIFY_OBJS) \
	$(UMIP_ACCESS_OBJS) $(UMIP_ACCESS_APP_OBJS) $(UMIP_ACCESS_APP_TARGET)

.PHONY: clean all
=====================================================================

